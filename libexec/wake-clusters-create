#!/usr/bin/env ruby

require 'json'
require 'securerandom'
require 'uri'
require_relative '../share/wake'
require_relative '../share/wake/dots'
require_relative '../share/wake/parser'
require_relative '../share/wake/panic'
require_relative '../share/wake/azure'

parser = OptsParser.parse do |opts|
  opts.banner = "Usage: wake cluster create [options]"

  opts.required :i, :iaas,         "IaaS vendor (only azure currently)"
  opts.required :n, :name,         "Name"
  opts.required :l, :location,     "Location [#{Azure.locations.join(",")}]"
  opts.boolean  :I, :"host-image", "Make a default vmi for this cluster"
  opts.boolean  :d, :default,      "Make the default cluster"
end

if parser[:name] !~ /[a-z0-9-]+/
  panic! "Only lowercase letters, numbers, and hyphens are allowed for the names of clusters"
end

if parser[:iaas] != "azure"
  panic! "Only azure is supported for possible IaaS vendors at this time"
end

unless Azure.locations.include? parser[:location]
  panic! "'#{parser[:location]}' is not a supported location. Possible locations are: #{Azure.locations.join(",")}"
end

cluster = WakeCluster.get(parser[:name]) || WakeCluster.new(parser[:name]).tap do |c|
  c.update("iaas", "azure")
  c.update("azure.default_size", "Basic_A3")
  c.update("azure.location", parser[:location])
end

# TODO: verify that all the current cluster stuff matches what's in the crap

if cluster["azure.location"].nil?
  cluster.update("azure.location", parser[:location])
end

if cluster["azure.location"] != parser[:location]
  panic! "This cluster is already setup in a different location"
end

dots do

  resource_group = Azure::ResourceGroup.new(subscription: Azure.subscription,
                                            name:         parser[:name],
                                            location:     parser[:location])

  Azure.resources.resource_groups.exists?(resource_group) ||
    Azure.resources.resource_groups.put!(resource_group)

  cluster.update("azure.resource_group", resource_group.name)


  storage_account_name = resource_group.name.gsub(/-/, '')
  storage_account = Azure::StorageAccount.new(resource_group: resource_group, name: storage_account_name)

  Azure.resources.storage_accounts.exists?(storage_account) ||
    Azure.resources.storage_accounts.put!(storage_account)

  cluster.update("azure.storage_account", storage_account.name)

  vnet_name = "#{parser[:name]}-vnet"
  vnet = Azure::Vnet.new(resource_group: resource_group, name: vnet_name)

  Azure.resources.vnets.exists?(vnet) ||
    Azure.resources.vnets.put!(vnet)

  cluster.update("azure.vnet", vnet.name)

  subnet_name = "#{parser[:name]}-subnet"
  subnet = Azure::Subnet.new(vnet: vnet, name: subnet_name)

  Azure.resources.subnets.exists?(subnet) ||
    Azure.resources.subnets.put!(subnet)

  cluster.update("azure.subnet", subnet.name)

end

if parser[:"host-image"]
  wake "host-images", :create, "--cluster", cluster.name, "--default", "--quiet"
end

if parser[:default]
  wake :clusters, "set-default", "--name", cluster.name
end

puts JSON.pretty_generate(cluster.to_hash)
