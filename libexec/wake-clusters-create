#!/usr/bin/env ruby

require 'json'
require 'securerandom'
require 'uri'
require_relative '../share/wake'
require_relative '../share/wake/dots'
require_relative '../share/wake/parser'
require_relative '../share/wake/panic'
require_relative '../share/wake/azure'
require_relative '../share/wake/azure/cluster'

parser = OptsParser.parse do |opts|
  opts.banner = "Usage: wake cluster create [options]"

  opts.required :i, :iaas,         "IaaS vendor (only azure currently)"
  opts.required :n, :name,         "Name"
  opts.required :l, :location,     "Location [#{Azure.locations.join(",")}]"
  opts.optional :z, :zone,         "DNS zone to use for storing different private ips"
  opts.boolean  :d, :default,      "Make the default cluster"
end

if parser[:name] !~ /[a-z0-9-]+/
  panic! "Only lowercase letters, numbers, and hyphens are allowed for the names of clusters"
end

if parser[:iaas] != "azure"
  panic! "Only azure is supported for possible IaaS vendors at this time"
end

unless Azure.locations.include? parser[:location]
  panic! "'#{parser[:location]}' is not a supported location. Possible locations are: #{Azure.locations.join(",")}"
end

cluster = WakeCluster.get(parser[:name]) || WakeCluster.new(parser[:name]).tap do |c|
  zone = parser[:zone] || "#{parser[:name]}.#{Azure.subscription_id}.wakeful"

  c.update("iaas", "azure")
  c.update("dns_zone", zone)
  c.update("azure.default_size", "Basic_A3")
  c.update("azure.location", parser[:location])
end

# TODO: verify that all the current cluster stuff matches what's in the passed args

if cluster["azure.location"] != parser[:location]
  panic! "This cluster is already setup in a different location"
end

dots do
  Azure::Cluster.call(cluster: cluster)
end

unless cluster.azure.seed_host_image_uri
  wake "host-images", :create, "--cluster", cluster.name, "--type", "seed", "--save", "--quiet"
end

unless cluster.azure.server_host_image_uri
  wake "host-images", :create, "--cluster", cluster.name, "--type", "server", "--save", "--quiet"
end

unless cluster.azure.agent_host_image_uri
  wake "host-images", :create, "--cluster", cluster.name, "--type", "agent", "--save", "--quiet"
end

if parser[:default]
  wake :clusters, "set-default", "--name", cluster.name
end

dns_zone = Azure::DNSZone.new(name: cluster.dns_zone, resource_group: WakeCluster.default.azure.resource_group)
record_set = Azure::DNSRecordSet.new(name: "consul", dns_zone: dns_zone)

3.times do
  output = dots do
    `wake hosts create --cluster #{cluster.name} --from server --quite`.chomp.tap do _
      unless $?.success?
        panic! "Could not create the host in the consul cluster"
      end
    end
  end

  Wake.log [:vm_create_output, output]

  json = JSON.parse(output)

  record_set.add_record ip_address: json["private_ip_address"]
  Azure.resources.dns_record_sets.put! record_set
end

puts JSON.pretty_generate(cluster.to_hash)
