#!/usr/bin/env ruby

require 'securerandom'
require_relative '../share/wake'
require_relative '../share/wake/dots'
require_relative '../share/wake/parser'
require_relative '../share/wake/panic'
require_relative '../share/wake/azure'

parser = OptsParser.parse do |opts|
  opts.banner = "Usage: wake host-images create [options]"

  opts.optional :c, :cluster,  "Cluster to create a host image in"
  opts.boolean  :d, :default,  "Save as the default host image for the cluster"
end

cluster = if parser[:cluster]
  WakeCluster.get(parser[:cluster])
else
  WakeCluster.default
end

vm_name = "baking-#{SecureRandom.hex(8)}"

wake :hosts, :create, "--cluster", cluster.name, "--name", vm_name, "--bare"

wake :hosts, :setup, "--cluster", cluster.name, "--name", vm_name

vm = Azure::VM.new(resource_group:  cluster.azure.resource_group,
                   name:            vm_name,
                   storage_account: cluster.azure.storage_account)

Wake.log "Capturing to a vhd file..."

vhd_uri = nil

dots do
  Azure.resources.vms.power_off!(vm)
  Azure.resources.vms.generalize!(vm)
  Azure.resources.vms.capture!(vm).tap do |a|
    body = a.response.parsed_body
    resource = body["resources"].first
    os_disk = resource["properties"]["storageProfile"]["osDisk"]
    vhd_uri = os_disk["image"]["uri"]

    Wake.log [:vhd_uri, vhd_uri]

    if parser[:default]
      cluster.update("azure.host_image_uri", vhd_uri)
    else
      puts vhd_uri
    end
  end
end

Wake.log "Deleting the vm..."

wake :hosts, :delete, "--cluster", cluster.name, "--name", vm_name

puts JSON.pretty_generate({ vhd_uri: vhd_uri })
